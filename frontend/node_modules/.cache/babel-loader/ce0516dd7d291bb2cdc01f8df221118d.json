{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"sources":["/home/rgargvanshu/DASS_Project/frontend/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","checkValidServiceWorker","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","process","env","NODE_ENV","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","message"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}